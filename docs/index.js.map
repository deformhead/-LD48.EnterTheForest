{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@hypercubejs/hypercubejs/webpack/bootstrap","webpack://@hypercubejs/hypercubejs/webpack/runtime/global","webpack://@hypercubejs/hypercubejs/webpack/runtime/publicPath","webpack://@hypercubejs/hypercubejs/./helpers/loop.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/system.js","webpack://@hypercubejs/hypercubejs/./helpers/node.js","webpack://@hypercubejs/hypercubejs/./engine/sources/systems/forward.js","webpack://@hypercubejs/hypercubejs/./helpers/mathematics.js","webpack://@hypercubejs/hypercubejs/./helpers/matrix4.js","webpack://@hypercubejs/hypercubejs/./helpers/model.js","webpack://@hypercubejs/hypercubejs/./helpers/box.js","webpack://@hypercubejs/hypercubejs/./engine/sources/systems/render.js","webpack://@hypercubejs/hypercubejs/./engine/index.js","webpack://@hypercubejs/hypercubejs/./engine/sources/core/engine.js","webpack://@hypercubejs/hypercubejs/./engine/sources/devices/controller.js","webpack://@hypercubejs/hypercubejs/./engine/sources/devices/game.js","webpack://@hypercubejs/hypercubejs/./helpers/world.js","webpack://@hypercubejs/hypercubejs/./engine/sources/devices/viewer.js","webpack://@hypercubejs/hypercubejs/./helpers/webgl.js","webpack://@hypercubejs/hypercubejs/./helpers/renderer.js","webpack://@hypercubejs/hypercubejs/./helpers/grid.js","webpack://@hypercubejs/hypercubejs/./helpers/colors.vertex.js","webpack://@hypercubejs/hypercubejs/./helpers/colors.fragment.js","webpack://@hypercubejs/hypercubejs/./helpers/lights.vertex.js","webpack://@hypercubejs/hypercubejs/./helpers/lights.fragment.js","webpack://@hypercubejs/hypercubejs/./game/background.mp3","webpack://@hypercubejs/hypercubejs/./machine/index.js","webpack://@hypercubejs/hypercubejs/./machine/sources/core/machine.js","webpack://@hypercubejs/hypercubejs/webpack/startup"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","function Loop(handler, framerate = 60, speed = 1, panic = 4000) {\n\n    let elapsedTime = 0;\n    let lastUpdate = null;\n    let paused = false;\n\n    function update() {\n\n        const currentUpdate = performance.now();\n\n        if (lastUpdate !== null\n        && paused === false) {\n\n            // define elapsed time since last update\n            elapsedTime += currentUpdate - lastUpdate;\n\n            // call user's update handler matching timeframe, speed and fixing browser time handling\n            while (elapsedTime >= 1000 / this.framerate / this.speed\n            && paused === false) {\n\n                const panic = elapsedTime >= this.panic / this.speed;\n                const tick = (panic === false) ? 1000 / this.framerate : elapsedTime * this.speed;\n\n                elapsedTime -= tick / this.speed;\n\n                handler(tick, panic);\n            }\n        }\n\n        // call user's update handler on each available frame\n        requestAnimationFrame(this.update.bind(this));\n\n        lastUpdate = currentUpdate;\n    }\n\n    function pause() {\n\n        paused = true;\n    }\n\n    function play() {\n\n        paused = false;\n    }\n\n    function tick(times = 1) {\n\n        // call user's update handler on each available frame\n        requestAnimationFrame(() => {\n\n            while (times--) {\n\n                handler(1000 / this.framerate);\n            }\n        });\n    }\n\n    this.framerate = framerate;\n    this.panic = panic;\n    this.speed = speed;\n\n    this.pause = pause;\n    this.play = play;\n    this.tick = tick;\n    this.update = update;\n}\n\n// exports current module as an object\nexport {Loop};\n","/**\n * Abstract Hypercube.js system.\n * @example\n * class Example extends System {\n *\n *     update() {}\n * }\n */\nclass System {\n\n    /**\n     * Stores the Hypercube.js Game Engine running the system.\n     * @type {import('../../index.js').Engine}\n     * @private\n     */\n    $engine;\n\n    /**\n     * Gets the Hypercube.js Game Engine running the system.\n     * @type {import('../../index.js').Engine}\n     * @public\n     * @readonly\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Sets the Hypercube.js Game Engine running the system.\n     * @type {import('../../index.js').Engine}\n     * @public\n     */\n    set engine($engine) {\n\n        this.$engine = $engine;\n    }\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {}\n\n    /**\n     * Updates the system.\n     * @public\n     */\n    update() {}\n}\n\nexport {\n\n    System\n};\n\nexport default System;\n","/**\n * Creates game nodes from cartridge nodes.\n * @example\n * const node = new Node(cartridgenode);\n * node.translate([4, 0, 0]);\n */\nclass Node {\n\n    /**\n     * Stores the identifier of the game node.\n     * @type {number}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the name of the game node.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the child nodes of the game node.\n     * @type {Array<gamenode>}\n     * @private\n     */\n    $nodes;\n\n    /**\n     * Stores the parameters of the game node.\n     * @type {object}\n     * @private\n     */\n    $parameters;\n\n    /**\n     * Stores the parent node of the game node.\n     * @type {gamenode}\n     * @private\n     */\n    $parent;\n\n    /**\n     * Stores the rotation of the game node.\n     * @type {vector3}\n     * @private\n     */\n    $rotation;\n\n    /**\n     * Stores the scale of the game node.\n     * @type {vector3}\n     * @private\n     */\n    $scale;\n\n    /**\n     * Stores the translation of the game node.\n     * @type {vector3}\n     * @private\n     */\n    $translation;\n\n    /**\n     * Stores the node type of the game node.\n     * @type {nodetype}\n     * @private\n     */\n    $type;\n\n    /**\n     * Tells if the the game node has child nodes.\n     * @type {boolean}\n     * @public\n     * @readonly\n     */\n    get haschildren() {\n\n        return this.$nodes.length !== 0;\n    }\n\n    /**\n     * Tells if the the game node has a parent node.\n     * @type {boolean}\n     * @public\n     * @readonly\n     */\n    get hasparent() {\n\n        return typeof this.$parent !== 'undefined';\n    }\n\n    /**\n     * Gets the identifier of the game node.\n     * @type {number}\n     * @public\n     * @readonly\n     */\n    get identifier() {\n\n        return this.$identifier;\n    }\n\n    /**\n     * Gets the name of the game node.\n     * @type {string}\n     * @public\n     * @readonly\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the child nodes of the game node.\n     * @type {Array<gamenode>}\n     * @public\n     * @readonly\n     */\n    get nodes() {\n\n        return this.$nodes;\n    }\n\n    /**\n     * Gets the parameters of the game node.\n     * @type {object}\n     * @public\n     * @readonly\n     */\n    get parameters() {\n\n        return this.$immutable(this.$parameters);\n    }\n\n    /**\n     * Gets the parent node of the game node.\n     * @type {gamenode}\n     * @public\n     * @readonly\n     */\n    get parent() {\n\n        return this.$parent;\n    }\n\n    /**\n     * Gets the rotation of the game node.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get rotation() {\n\n        return this.$immutable(this.$rotation);\n    }\n\n    /**\n     * Gets the scale of the game node.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get scale() {\n\n        return this.$immutable(this.$scale);\n    }\n\n    /**\n     * Gets the translation of the game node.\n     * @type {vector3}\n     * @public\n     * @readonly\n     */\n    get translation() {\n\n        return this.$immutable(this.$translation);\n    }\n\n    /**\n     * Gets the node type of the game node.\n     * @type {nodetype}\n     * @public\n     * @readonly\n     */\n    get type() {\n\n        return this.$type;\n    }\n\n    /**\n     * Creates a game node from a cartridge node.\n     * @param {(cartridgenodecamera|cartridgenodeempty|cartridgenodemodel)} cartridgenode The JSON representation of the game node.\n     */\n    constructor(cartridgenode) {\n\n        const {type} = cartridgenode;\n\n        if (type === 'CAMERA_NODE') {\n\n            const cartridgenodecamera = /** @type {cartridgenodecamera} */ (cartridgenode);\n            this.$constructornodecamera(cartridgenodecamera);\n        }\n\n        else if (type === 'MODEL_NODE') {\n\n            const cartridgenodemodel = /** @type {cartridgenodemodel} */ (cartridgenode);\n            this.$constructornodemodel(cartridgenodemodel);\n        }\n\n        else if (type === 'NODE') {\n\n            const cartridgenodeempty = /** @type {cartridgenodeempty} */ (cartridgenode);\n            this.$constructornodeempty(cartridgenodeempty);\n        }\n    }\n\n    /**\n     * Constructs a game node from a cartridge camera node.\n     * @param {cartridgenodecamera} cartridgenodecamera The JSON representation of the game node.\n     * @private\n     */\n    $constructornodecamera(cartridgenodecamera) {\n\n        this.$identifier = cartridgenodecamera.identifier;\n        this.$name = cartridgenodecamera.name;\n        this.$type = cartridgenodecamera.type;\n        this.$nodes = [];\n        this.$parameters = cartridgenodecamera.parameters;\n        this.$translation = cartridgenodecamera.parameters.translation;\n        this.$rotation = cartridgenodecamera.parameters.rotation;\n    }\n\n    /**\n     * Constructs a game node from a cartridge empty node.\n     * @param {cartridgenodeempty} cartridgenodeempty The JSON representation of the game node.\n     * @private\n     */\n    $constructornodeempty(cartridgenodeempty) {\n\n        this.$identifier = cartridgenodeempty.identifier;\n        this.$name = cartridgenodeempty.name;\n        this.$type = cartridgenodeempty.type;\n        this.$nodes = [];\n        this.$parameters = cartridgenodeempty.parameters;\n        this.$translation = cartridgenodeempty.parameters.translation;\n        this.$rotation = cartridgenodeempty.parameters.rotation;\n        this.$scale = cartridgenodeempty.parameters.scale;\n    }\n\n    /**\n     * Constructs a game node from a cartridge model node.\n     * @param {cartridgenodemodel} cartridgenodemodel The JSON representation of the game node.\n     * @private\n     */\n    $constructornodemodel(cartridgenodemodel) {\n\n        this.$identifier = cartridgenodemodel.identifier;\n        this.$name = cartridgenodemodel.name;\n        this.$type = cartridgenodemodel.type;\n        this.$nodes = [];\n        this.$parameters = cartridgenodemodel.parameters;\n        this.$translation = cartridgenodemodel.parameters.translation;\n        this.$rotation = cartridgenodemodel.parameters.rotation;\n        this.$scale = cartridgenodemodel.parameters.scale;\n    }\n\n    /**\n     * Gets immutable data from data source.\n     * @param {any} data The data to make immutable.\n     * @returns {any}\n     * @private\n     */\n    $immutable(data) {\n\n        if (typeof data === 'undefined') {\n\n            return data;\n        }\n\n        return JSON.parse(JSON.stringify(data));\n    }\n\n    /**\n     * Adds a child node to the game node.\n     * @param {gamenode} node The child node to add to the game node.\n     * @public\n     */\n    addchild(node) {\n\n        this.$nodes.push(node);\n    }\n\n    /**\n     * Sets the parent node of the game node.\n     * @param {gamenode} node The parent node to set to the game node.\n     * @public\n     */\n    addparent(node) {\n\n        this.$parent = node;\n    }\n\n    /**\n     * Removes a child node from the game node.\n     * @param {gamenode} node The child node to remove from the game node.\n     * @public\n     */\n    removechild(node) {\n\n        const index = this.$nodes.indexOf(node);\n\n        if (index !== -1) {\n\n            this.$nodes.splice(index, 1);\n        }\n    }\n\n    /**\n     * Removes the parent node from the game node.\n     * @public\n     */\n    removeparent() {\n\n        this.$parent = undefined;\n    }\n\n    /**\n     * Sets the rotate of the game node.\n     * @param {vector3} rotate The rotate to set to the game node.\n     * @public\n     */\n    rotateall([x, y, z]) {\n\n        this.$rotation = [x, y, z];\n    }\n\n    /**\n     * Sets the x rotate of the game node.\n     * @param {number} x The x rotate to set to the game node.\n     * @public\n     */\n    rotatex(x) {\n\n        this.$rotation[0] = x;\n    }\n\n    /**\n     * Sets the y rotate of the game node.\n     * @param {number} y The y rotate to set to the game node.\n     * @public\n     */\n    rotatey(y) {\n\n        this.$rotation[1] = y;\n    }\n\n    /**\n     * Sets the z rotate of the game node.\n     * @param {number} z The z rotate to set to the game node.\n     * @public\n     */\n    rotatez(z) {\n\n        this.$rotation[2] = z;\n    }\n\n    /**\n     * Sets the scale of the game node.\n     * @param {vector3} scale The scale to set to the game node.\n     * @public\n     */\n    scaleall([x, y, z]) {\n\n        this.$scale = [x, y, z];\n    }\n\n    /**\n     * Sets the x scale of the game node.\n     * @param {number} x The x scale to set to the game node.\n     * @public\n     */\n    scalex(x) {\n\n        this.$scale[0] = x;\n    }\n\n    /**\n     * Sets the y scale of the game node.\n     * @param {number} y The y scale to set to the game node.\n     * @public\n     */\n    scaley(y) {\n\n        this.$scale[1] = y;\n    }\n\n    /**\n     * Sets the z scale of the game node.\n     * @param {number} z The z scale to set to the game node.\n     * @public\n     */\n    scalez(z) {\n\n        this.$scale[2] = z;\n    }\n\n    /**\n     * Sets the translation of the game node.\n     * @param {vector3} translation The translation to set to the game node.\n     * @public\n     */\n    translateall([x, y, z]) {\n\n        this.$translation = [x, y, z];\n    }\n\n    /**\n     * Sets the x translation of the game node.\n     * @param {number} x The x translation to set to the game node.\n     * @public\n     */\n    translatex(x) {\n\n        this.$translation[0] = x;\n    }\n\n    /**\n     * Sets the y translation of the game node.\n     * @param {number} y The y translation to set to the game node.\n     * @public\n     */\n    translatey(y) {\n\n        this.$translation[1] = y;\n    }\n\n    /**\n     * Sets the z translation of the game node.\n     * @param {number} z The z translation to set to the game node.\n     * @public\n     */\n    translatez(z) {\n\n        this.$translation[2] = z;\n    }\n}\n\nexport {\n\n    Node\n};\n\nexport default Node;\n","import {System} from '../../index.js';\n\nclass Forward extends System {\n\n    $deathplaying;\n\n    $windplaying;\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {\n\n        //\n    }\n\n    /**\n     * Updates the system.\n     * @public\n     */\n    update(timeframe) {\n\n        if (typeof this.engine.devicegame === 'undefined') {\n\n            return;\n        }\n\n        const herocontainer = this.engine.devicegame.$world.$nodes[10];\n\n        herocontainer.$translation[2] -= 16 * timeframe / 1000;\n\n        if (this.engine.devicegame.$world.$camera.$parameters.projection.fieldofview < 110) {\n\n            this.engine.devicegame.$world.$camera.$parameters.projection.fieldofview += 1 * timeframe / 1000;\n        }\n\n        let collision = false;\n\n        Object.values(this.engine.devicegame.$world.$nodes).forEach((node) => {\n\n            if (collision === true) return;\n\n            if (node.name !== 'Cube') {\n\n                return;\n            }\n\n            if (Math.abs(herocontainer.$translation[2] - node.$translation[2]) < 1\n            && herocontainer.$translation[0] === node.$translation[0]) {\n\n                collision = true;\n\n                // if (this.$deathplaying !== true) {\n\n                //     const sound = new Audio(blip);\n\n                //     sound.oncanplaythrough = () => {\n\n                //         sound.play();\n                //     };\n\n                //     sound.onended = () => {\n\n                //         this.$deathplaying = false;\n                //     }\n\n                //     this.$deathplaying = true;\n                // }\n            }\n\n            // else if (herocontainer.$translation[2] < node.$translation[2]\n            // && herocontainer.$translation[0] !== node.$translation[0]\n            // && this.$windplaying !== true) {\n\n            //     const sound = new Audio(blip);\n\n            //     sound.oncanplaythrough = () => {\n\n            //         sound.play();\n            //     };\n\n            //     sound.onended = () => {\n\n            //         this.$windplaying = false;\n            //     }\n\n            //     this.$windplaying = true;\n            // }\n        });\n\n        if (herocontainer.$translation[2] <= -96) {\n\n            herocontainer.$translation[2] = 0;\n        }\n\n        if (collision === true) this.engine.$machine.stop();\n    }\n}\n\nexport {\n\n    Forward\n};\n\nexport default Forward;\n","const RADIANS = Math.PI / 180;\n\nexport {\n\n    RADIANS\n};\n","/**\n * Creates 4x4 matrices.\n * @example <caption>With chaining:</caption>\n * const elements = new Matrix4()\n * .set([...])\n * .translate([1, 0, 0])\n * .get();\n * @example <caption>Without chaining:</caption>\n * const matrix = new Matrix4();\n *\n * matrix.set([...]);\n * matrix.translate([1, 0, 0]);\n *\n * const elements = matrix.get();\n */\nclass Matrix4 {\n\n    /**\n     * Stores the elements of the matrix.\n     * @type {number[]}\n     * @private\n     */\n    $elements = [];\n\n    /**\n     * Stores the elements of the matrix.\n     * @type {number[]}\n     * @public\n     * @readonly\n     */\n    get elements() {\n\n        return this.$elements;\n    }\n\n    /**\n     * Creates a new 4x4 matrix.\n     */\n    constructor() {\n\n        this.identity();\n    }\n\n    /**\n     * Adds a 4x4 matrix.\n     * @param {Matrix4} matrix The 4x4 matrix to add.\n     * @returns {this}\n     */\n    add(matrix) {\n\n        const elements = matrix.get();\n\n        this.$elements[0] += elements[0];\n        this.$elements[1] += elements[1];\n        this.$elements[2] += elements[2];\n        this.$elements[3] += elements[3];\n\n        this.$elements[4] += elements[4];\n        this.$elements[5] += elements[5];\n        this.$elements[6] += elements[6];\n        this.$elements[7] += elements[7];\n\n        this.$elements[8] += elements[8];\n        this.$elements[9] += elements[9];\n        this.$elements[10] += elements[10];\n        this.$elements[11] += elements[11];\n\n        this.$elements[12] += elements[12];\n        this.$elements[13] += elements[13];\n        this.$elements[14] += elements[14];\n        this.$elements[15] += elements[15];\n\n        return this;\n    }\n\n    /**\n     * Clones a 4x4 matrix.\n     * @param {Matrix4} matrix The 4x4 matrix to clone.\n     * @returns {this}\n     */\n    clone(matrix){\n\n        this.$elements = [...matrix.get()];\n\n        return this;\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @TODO -----------------------------------------\n     */\n    from(elements) {\n\n        this.$elements = [...elements];\n\n        return this;\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Gets the elements of the 4x4 matrix.\n     * @returns {number[]}\n     */\n    get() {\n\n        return [...this.$elements];\n    }\n\n    /**\n     * Sets the 4x4 matrix to the identity matrix.\n     * @returns {this}\n     */\n    identity() {\n\n        this.$elements = [\n\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        ];\n\n        return this;\n    }\n\n    /**\n     * Inverts the 4x4 matrix.\n     * @returns {this}\n     */\n    invert() {\n\n        const [\n\n            aa, ab, ac, ad,\n            ba, bb, bc, bd,\n            ca, cb, cc, cd,\n            da, db, dc, dd\n\n        ] = this.$elements;\n\n        const eeff = aa * bb - ab * ba;\n        const eefg = aa * bc - ac * ba;\n        const eefh = aa * bd - ad * ba;\n        const effg = ab * bc - ac * bb;\n        const effh = ab * bd - ad * bb;\n        const egfh = ac * bd - ad * bc;\n\n        const gehf = ca * db - cb * da;\n        const gehg = ca * dc - cc * da;\n        const gehh = ca * dd - cd * da;\n        const gfhg = cb * dc - cc * db;\n        const gfhh = cb * dd - cd * db;\n        const gghh = cc * dd - cd * dc;\n\n\n        const determinant = eeff * gghh - eefg * gfhh + eefh * gfhg + effg * gehh - effh * gehg + egfh * gehf;\n\n        if (determinant !== 0) {\n\n            this.$elements[0] = (bb * gghh - bc * gfhh + bd * gfhg) / determinant;\n            this.$elements[1] = (ac * gfhh - ab * gghh - ad * gfhg) / determinant;\n            this.$elements[2] = (db * egfh - dc * effh + dd * effg) / determinant;\n            this.$elements[3] = (cc * effh - cb * egfh - cd * effg) / determinant;\n\n            this.$elements[4] = (bc * gehh - ba * gghh - bd * gehg) / determinant;\n            this.$elements[5] = (aa * gghh - ac * gehh + ad * gehg) / determinant;\n            this.$elements[6] = (dc * eefh - da * egfh - dd * eefg) / determinant;\n            this.$elements[7] = (ca * egfh - cc * eefh + cd * eefg) / determinant;\n\n            this.$elements[8] = (ba * gfhh - bb * gehh + bd * gehf) / determinant;\n            this.$elements[9] = (ab * gehh - aa * gfhh - ad * gehf) / determinant;\n            this.$elements[10] = (da * effh - db * eefh + dd * eeff) / determinant;\n            this.$elements[11] = (cb * eefh - ca * effh - cd * eeff) / determinant;\n\n            this.$elements[12] = (bb * gehg - ba * gfhg - bc * gehf) / determinant;\n            this.$elements[13] = (aa * gfhg - ab * gehg + ac * gehf) / determinant;\n            this.$elements[14] = (db * eefg - da * effg - dc * eeff) / determinant;\n            this.$elements[15] = (ca * effg - cb * eefg + cc * eeff) / determinant;\n        }\n\n        return this;\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // @TODO ------------------------------\n\n    multiply(b) {\n\n        b = b.get();\n\n        let a00 = this.$elements[0],\n          a01 = this.$elements[1],\n          a02 = this.$elements[2],\n          a03 = this.$elements[3];\n\n        let a10 = this.$elements[4],\n          a11 = this.$elements[5],\n          a12 = this.$elements[6],\n          a13 = this.$elements[7];\n\n        let a20 = this.$elements[8],\n          a21 = this.$elements[9],\n          a22 = this.$elements[10],\n          a23 = this.$elements[11];\n\n        let a30 = this.$elements[12],\n          a31 = this.$elements[13],\n          a32 = this.$elements[14],\n          a33 = this.$elements[15];\n\n        // Cache only the current line of the second matrix\n\n        let b0 = b[0],\n          b1 = b[1],\n          b2 = b[2],\n          b3 = b[3];\n\n        this.$elements[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.$elements[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.$elements[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.$elements[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[4];\n        b1 = b[5];\n        b2 = b[6];\n        b3 = b[7];\n\n        this.$elements[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.$elements[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.$elements[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.$elements[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[8];\n        b1 = b[9];\n        b2 = b[10];\n        b3 = b[11];\n\n        this.$elements[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.$elements[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.$elements[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.$elements[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[12];\n        b1 = b[13];\n        b2 = b[14];\n        b3 = b[15];\n\n        this.$elements[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.$elements[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.$elements[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.$elements[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        return this;\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Sets the 4x4 matrix to a finite perspective projection.\n     * @param {number} angle The vertical field of view in radians.\n     * @param {number} aspect The aspect ratio of the field of view (width / height).\n     * @param {number} near The distance to the near clipping plane.\n     * @param {number} far The distance to the far clipping plane.\n     * @returns {this}\n     */\n    perspective(angle, aspect, near, far) {\n\n        const tangent = Math.tan(angle / 2);\n        const range = near - far;\n\n        this.$elements[0] = 1 / (tangent * aspect);\n        this.$elements[1] = 0;\n        this.$elements[2] = 0;\n        this.$elements[3] = 0;\n\n        this.$elements[4] = 0;\n        this.$elements[5] = 1 / tangent;\n        this.$elements[6] = 0;\n        this.$elements[7] = 0;\n\n        this.$elements[8] = 0;\n        this.$elements[9] = 0;\n        this.$elements[10] = (near + far) / range;\n        this.$elements[11] = -1;\n\n        this.$elements[12] = 0;\n        this.$elements[13] = 0;\n        this.$elements[14] = 2 * near * far / range;\n        this.$elements[15] = 0;\n\n        return this;\n    }\n\n    /**\n     * Rotates the 4x4 matrix.\n     * @param {number} angle The angle of rotation in radians.\n     * @param {number[]} vector3 The rotation to apply.\n     * @returns {this}\n     */\n    rotate(angle, vector3) {\n\n        let [x, y, z] = vector3;\n\n        const hypotenuse = Math.hypot(x, y, z);\n\n        if (hypotenuse < Number.EPSILON) {\n\n            return this;\n        }\n\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n        const tangent = 1 - cosine;\n\n        x /= hypotenuse;\n        y /= hypotenuse;\n        z /= hypotenuse;\n\n        const ee = x * x * tangent + cosine;\n        const ef = y * x * tangent + z * sine;\n        const eg = z * x * tangent - y * sine;\n\n        const fe = x * y * tangent - z * sine;\n        const ff = y * y * tangent + cosine;\n        const fg = z * y * tangent + x * sine;\n\n        const ge = x * z * tangent + y * sine;\n        const gf = y * z * tangent - x * sine;\n        const gg = z * z * tangent + cosine;\n\n        const {\n\n            '0': aa,\n            '1': ab,\n            '2': ac,\n            '3': ad,\n\n            '4': ba,\n            '5': bb,\n            '6': bc,\n            '7': bd,\n\n            '8': ca,\n            '9': cb,\n            '10': cc,\n            '11': cd\n\n        } = this.$elements;\n\n        this.$elements[0] = aa * ee + ba * ef + ca * eg;\n        this.$elements[1] = ab * ee + bb * ef + cb * eg;\n        this.$elements[2] = ac * ee + bc * ef + cc * eg;\n        this.$elements[3] = ad * ee + bd * ef + cd * eg;\n\n        this.$elements[4] = aa * fe + ba * ff + ca * fg;\n        this.$elements[5] = ab * fe + bb * ff + cb * fg;\n        this.$elements[6] = ac * fe + bc * ff + cc * fg;\n        this.$elements[7] = ad * fe + bd * ff + cd * fg;\n\n        this.$elements[8] = aa * ge + ba * gf + ca * gg;\n        this.$elements[9] = ab * ge + bb * gf + cb * gg;\n        this.$elements[10] = ac * ge + bc * gf + cc * gg;\n        this.$elements[11] = ad * ge + bd * gf + cd * gg;\n\n        return this;\n    }\n\n    /**\n     * Rotates the 4x4 matrix on the x axis.\n     * @param {number} angle The angle of rotation in radians.\n     * @returns {this}\n     */\n    rotateX(angle) {\n\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n\n        const {\n\n            '4': ba,\n            '5': bb,\n            '6': bc,\n            '7': bd,\n\n            '8': ca,\n            '9': cb,\n            '10': cc,\n            '11': cd\n\n        } = this.$elements;\n\n        this.$elements[4] = ba * cosine + ca * sine;\n        this.$elements[5] = bb * cosine + cb * sine;\n        this.$elements[6] = bc * cosine + cc * sine;\n        this.$elements[7] = bd * cosine + cd * sine;\n\n        this.$elements[8] = ca * cosine - ba * sine;\n        this.$elements[9] = cb * cosine - bb * sine;\n        this.$elements[10] = cc * cosine - bc * sine;\n        this.$elements[11] = cd * cosine - bd * sine;\n\n        return this;\n    }\n\n    /**\n     * Rotates the 4x4 matrix on the y axis.\n     * @param {number} angle The angle of rotation in radians.\n     * @returns {this}\n     */\n    rotateY(angle) {\n\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n\n        const {\n\n            '0': aa,\n            '1': ab,\n            '2': ac,\n            '3': ad,\n\n            '8': ca,\n            '9': cb,\n            '10': cc,\n            '11': cd\n\n        } = this.$elements;\n\n        this.$elements[0] = aa * cosine - ca * sine;\n        this.$elements[1] = ab * cosine - cb * sine;\n        this.$elements[2] = ac * cosine - cc * sine;\n        this.$elements[3] = ad * cosine - cd * sine;\n\n        this.$elements[8] = aa * sine + ca * cosine;\n        this.$elements[9] = ab * sine + cb * cosine;\n        this.$elements[10] = ac * sine + cc * cosine;\n        this.$elements[11] = ad * sine + cd * cosine;\n\n        return this;\n    }\n\n    /**\n     * Rotates the 4x4 matrix on the z axis.\n     * @param {number} angle The angle of rotation in radians.\n     * @returns {this}\n     */\n    rotateZ(angle) {\n\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n\n        const {\n\n            '0': aa,\n            '1': ab,\n            '2': ac,\n            '3': ad,\n\n            '4': ba,\n            '5': bb,\n            '6': bc,\n            '7': bd\n\n        } = this.$elements;\n\n        this.$elements[0] = aa * cosine + ba * sine;\n        this.$elements[1] = ab * cosine + bb * sine;\n        this.$elements[2] = ac * cosine + bc * sine;\n        this.$elements[3] = ad * cosine + bd * sine;\n\n        this.$elements[4] = ba * cosine - aa * sine;\n        this.$elements[5] = bb * cosine - ab * sine;\n        this.$elements[6] = bc * cosine - ac * sine;\n        this.$elements[7] = bd * cosine - ad * sine;\n\n        return this;\n    }\n\n    /**\n     * Scales the 4x4 matrix.\n     * @param {number[]} vector3 The scale to apply.\n     * @returns {this}\n     */\n    scale(vector3) {\n\n        const [x, y, z] = vector3;\n\n        this.$elements[0] *= x;\n        this.$elements[1] *= x;\n        this.$elements[2] *= x;\n        this.$elements[3] *= x;\n\n        this.$elements[4] *= y;\n        this.$elements[5] *= y;\n        this.$elements[6] *= y;\n        this.$elements[7] *= y;\n\n        this.$elements[8] *= z;\n        this.$elements[9] *= z;\n        this.$elements[10] *= z;\n        this.$elements[11] *= z;\n\n        return this;\n    }\n\n    /**\n     * Sets the elements of the 4x4 matrix.\n     * @param {number[]} elements The elements to set.\n     * @returns {this}\n     */\n    set(elements) {\n\n        this.$elements = [...elements];\n\n        return this;\n    }\n\n    /**\n     * Subtracts a 4x4 matrix.\n     * @param {Matrix4} matrix The 4x4 matrix to subtract.\n     * @returns {this}\n     */\n    subtract(matrix) {\n\n        const elements = matrix.get();\n\n        this.$elements[0] -= elements[0];\n        this.$elements[1] -= elements[1];\n        this.$elements[2] -= elements[2];\n        this.$elements[3] -= elements[3];\n\n        this.$elements[4] -= elements[4];\n        this.$elements[5] -= elements[5];\n        this.$elements[6] -= elements[6];\n        this.$elements[7] -= elements[7];\n\n        this.$elements[8] -= elements[8];\n        this.$elements[9] -= elements[9];\n        this.$elements[10] -= elements[10];\n        this.$elements[11] -= elements[11];\n\n        this.$elements[12] -= elements[12];\n        this.$elements[13] -= elements[13];\n        this.$elements[14] -= elements[14];\n        this.$elements[15] -= elements[15];\n\n        return this;\n    }\n\n    /**\n     * Translates the 4x4 matrix.\n     * @param {number[]} vector3 The translation to apply.\n     * @returns {this}\n     */\n    translate(vector3) {\n\n        const [x, y, z] = vector3;\n\n        const [\n\n            aa, ab, ac, ad,\n            ba, bb, bc, bd,\n            ca, cb, cc, cd,\n            da, db, dc, dd\n\n        ] = this.$elements;\n\n        this.$elements[12] = aa * x + ba * y + ca * z + da;\n        this.$elements[13] = ab * x + bb * y + cb * z + db;\n        this.$elements[14] = ac * x + bc * y + cc * z + dc;\n        this.$elements[15] = ad * x + bd * y + cd * z + dd;\n\n        return this;\n    }\n\n    /**\n     * Transposes the 4x4 matrix.\n     * @returns {this}\n     */\n    transpose() {\n\n        const {\n\n            '1': ab,\n            '2': ac,\n            '3': ad,\n\n            '4': ba,\n            '6': bc,\n            '7': bd,\n\n            '8': ca,\n            '9': cb,\n            '11': cd,\n\n            '12': da,\n            '13': db,\n            '14': dc\n\n        } = this.$elements;\n\n        this.$elements[1] = ba;\n        this.$elements[2] = ca;\n        this.$elements[3] = da;\n\n        this.$elements[4] = ab;\n        this.$elements[6] = cb;\n        this.$elements[7] = db;\n\n        this.$elements[8] = ac;\n        this.$elements[9] = bc;\n        this.$elements[11] = dc;\n\n        this.$elements[12] = ad;\n        this.$elements[13] = bd;\n        this.$elements[14] = cd;\n\n        return this;\n    }\n}\n\nexport {\n\n    Matrix4\n};\n\nexport default Matrix4;\n","import WebGL from './webgl.js';\n\nconst MODES = {\n\n    'POINTS': 0,\n    'LINES': 1,\n    'LINE_STRIP': 2,\n    'LINE_LOOP': 3,\n    'TRIANGLES': 4,\n    'TRIANGLE_STRIP': 5,\n    'TRIANGLE_FAN': 6\n};\n\nconst TYPEDARRAYS = {\n\n    'BYTE': Int8Array,\n    'UNSIGNED_BYTE': Uint8Array,\n    'SHORT': Int16Array,\n    'UNSIGNED_SHORT': Uint16Array,\n    'INT': Int32Array,\n    'UNSIGNED_INT': Uint32Array,\n    'FLOAT': Float32Array\n};\n\nconst TYPES = {\n\n    'BYTE': 5120,\n    'UNSIGNED_BYTE': 5121,\n    'SHORT': 5122,\n    'UNSIGNED_SHORT': 5123,\n    'INT': 5124,\n    'UNSIGNED_INT': 5125,\n    'FLOAT': 5126\n};\n\n/**\n * Handles models to draw with WebGL 2.0.\n * @example <caption>With chaining:</caption>\n * const model = new Model(webgl).prepare(json).render();\n * @example <caption>Without chaining:</caption>\n * const model = new Model(webgl);\n * model.prepare(json);\n * model.render();\n */\nclass Model {\n\n    /**\n     * Stores the rendering context of the renderer.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the prepared model.\n     * @type {modelPrepared}\n     * @private\n     */\n    $model;\n\n    /**\n     * Stores the WebGL 2.0 wrapper.\n     * @type {WebGL}\n     * @private\n     */\n    $webgl;\n\n    /**\n     * Gets the prepared model.\n     * @type {modelPrepared}\n     * @public\n     * @readonly\n     */\n    get model() {\n\n        return this.$model;\n    }\n\n    /**\n     * Handles a new model to draw with WebGL 2.0.\n     * @param {WebGL} webgl The WebGL 2.0 wrapper.\n     */\n    constructor(webgl) {\n\n        this.$webgl = webgl;\n        this.$context = webgl.context;\n    }\n\n    /**\n     * Prepares the model for rendering.\n     * @param {modelJSON} json The JSON representation of the model to prepare.\n     * @returns {this}\n     * @public\n     */\n    prepare(json) {\n\n        const model = {};\n\n        const {colors, normals, draw, positions} = json;\n\n        if (typeof colors !== 'undefined') {\n\n            const {buffer, components, normalize, offset, stride, type} = colors;\n\n            const attributeBuffer = this.$context.createBuffer();\n            this.$context.bindBuffer(this.$context.ARRAY_BUFFER, attributeBuffer);\n            this.$context.bufferData(this.$context.ARRAY_BUFFER, new TYPEDARRAYS[type](buffer), this.$context.STATIC_DRAW);\n\n            model.colors = {\n\n                'buffer': attributeBuffer,\n                'components': components,\n                'type': TYPES[type],\n                'normalize': normalize,\n                'stride': stride,\n                'offset': offset\n            };\n        }\n\n        if (typeof normals !== 'undefined') {\n\n            const {buffer, components, normalize, offset, stride, type} = normals;\n\n            const attributeBuffer = this.$context.createBuffer();\n            this.$context.bindBuffer(this.$context.ARRAY_BUFFER, attributeBuffer);\n            this.$context.bufferData(this.$context.ARRAY_BUFFER, new TYPEDARRAYS[type](buffer), this.$context.STATIC_DRAW);\n\n            model.normals = {\n\n                'buffer': attributeBuffer,\n                'components': components,\n                'type': TYPES[type],\n                'normalize': normalize,\n                'stride': stride,\n                'offset': offset\n            };\n        }\n\n        if (typeof positions !== 'undefined') {\n\n            const {buffer, components, normalize, offset, stride, type} = positions;\n\n            const attributeBuffer = this.$context.createBuffer();\n            this.$context.bindBuffer(this.$context.ARRAY_BUFFER, attributeBuffer);\n            this.$context.bufferData(this.$context.ARRAY_BUFFER, new TYPEDARRAYS[type](buffer), this.$context.STATIC_DRAW);\n\n            model.positions = {\n\n                'buffer': attributeBuffer,\n                'components': components,\n                'type': TYPES[type],\n                'normalize': normalize,\n                'stride': stride,\n                'offset': offset\n            };\n        }\n\n        if (typeof draw !== 'undefined') {\n\n            const {count, method, mode, offset} = draw;\n\n            model.draw = {\n\n                'mode': MODES[mode],\n                'method': method,\n                'offset': offset,\n                'count': count\n            }\n        }\n\n        this.$model = model;\n\n        return this;\n    }\n\n    /**\n     * Renders the model.\n     * @returns {this}\n     * @public\n     */\n    render(filter) {\n\n        const {colors, draw, normals, positions} = this.$model;\n\n        if (typeof colors !== 'undefined'\n        && filter.colors === true) {\n\n            const {buffer, components, normalize, offset, stride, type} = colors;\n\n            const attribute = this.$webgl.attribute('COLOR');\n\n            this.$context.bindBuffer(this.$context.ARRAY_BUFFER, buffer);\n            this.$context.vertexAttribPointer(attribute, components, type, normalize, stride, offset);\n            this.$context.enableVertexAttribArray(attribute);\n        }\n\n        if (typeof normals !== 'undefined'\n        && filter.normals === true) {\n\n            const {buffer, components, normalize, offset, stride, type} = normals;\n\n            const attribute = this.$webgl.attribute('NORMAL');\n\n            this.$context.bindBuffer(this.$context.ARRAY_BUFFER, buffer);\n            this.$context.vertexAttribPointer(attribute, components, type, normalize, stride, offset);\n            this.$context.enableVertexAttribArray(attribute);\n        }\n\n        if (typeof positions !== 'undefined'\n        && filter.positions === true) {\n\n            const {buffer, components, normalize, offset, stride, type} = positions;\n\n            const attribute = this.$webgl.attribute('POSITION');\n\n            this.$context.bindBuffer(this.$context.ARRAY_BUFFER, buffer);\n            this.$context.vertexAttribPointer(attribute, components, type, normalize, stride, offset);\n            this.$context.enableVertexAttribArray(attribute);\n        }\n\n        if (draw.method === 'arrays') {\n\n            const {count, mode, offset} = draw;\n\n            this.$context.drawArrays(mode, offset, count);\n        }\n\n        return this;\n    }\n}\n\nexport {\n\n    Model\n};\n\nexport default Model;\n","function getnormals() {\n\n    return [\n\n        0.0, -1.0, 0.0,\n        0.0, -1.0, 0.0,\n        0.0, -1.0, 0.0,\n\n        0.0, -1.0, 0.0,\n        0.0, -1.0, 0.0,\n        0.0, -1.0, 0.0,\n\n        -1.0, 0.0, 0.0,\n        -1.0, 0.0, 0.0,\n        -1.0, 0.0, 0.0,\n\n        -1.0, 0.0, 0.0,\n        -1.0, 0.0, 0.0,\n        -1.0, 0.0, 0.0,\n\n        0.0, 0.0, -1.0,\n        0.0, 0.0, -1.0,\n        0.0, 0.0, -1.0,\n\n        0.0, 0.0, -1.0,\n        0.0, 0.0, -1.0,\n        0.0, 0.0, -1.0,\n\n        0.0, 1.0, 0.0,\n        0.0, 1.0, 0.0,\n        0.0, 1.0, 0.0,\n\n        0.0, 1.0, 0.0,\n        0.0, 1.0, 0.0,\n        0.0, 1.0, 0.0,\n\n        0.0, 0.0, 1.0,\n        0.0, 0.0, 1.0,\n        0.0, 0.0, 1.0,\n\n        0.0, 0.0, 1.0,\n        0.0, 0.0, 1.0,\n        0.0, 0.0, 1.0,\n\n        1.0, 0.0, 0.0,\n        1.0, 0.0, 0.0,\n        1.0, 0.0, 0.0,\n\n        1.0, 0.0, 0.0,\n        1.0, 0.0, 0.0,\n        1.0, 0.0, 0.0\n    ];\n}\n\nfunction getpositions(x, y, z) {\n\n    const positions = [\n\n        -1.0, -1.0, -1.0,\n        -1.0, -1.0, 1.0,\n        1.0, -1.0, 1.0,\n\n        1.0, -1.0, 1.0,\n        1.0, -1.0, -1.0,\n        -1.0, -1.0, -1.0,\n\n        -1.0, -1.0, -1.0,\n        -1.0, 1.0, -1.0,\n        -1.0, 1.0, 1.0,\n\n        -1.0, 1.0, 1.0,\n        -1.0, -1.0, 1.0,\n        -1.0, -1.0, -1.0,\n\n        -1.0, -1.0, -1.0,\n        1.0, -1.0, -1.0,\n        1.0, 1.0, -1.0,\n\n        1.0, 1.0, -1.0,\n        -1.0, 1.0, -1.0,\n        -1.0, -1.0, -1.0,\n\n        -1.0, 1.0, 1.0,\n        -1.0, 1.0, -1.0,\n        1.0, 1.0, -1.0,\n\n        1.0, 1.0, -1.0,\n        1.0, 1.0, 1.0,\n        -1.0, 1.0, 1.0,\n\n        -1.0, 1.0, 1.0,\n        1.0, 1.0, 1.0,\n        1.0, -1.0, 1.0,\n\n        1.0, -1.0, 1.0,\n        -1.0, -1.0, 1.0,\n        -1.0, 1.0, 1.0,\n\n        1.0, -1.0, 1.0,\n        1.0, 1.0, 1.0,\n        1.0, 1.0, -1.0,\n\n        1.0, 1.0, -1.0,\n        1.0, -1.0, -1.0,\n        1.0, -1.0, 1.0\n\n    ].map((value, index) => {\n\n        if (index % 3 === 0) return value + x;\n        if (index % 3 === 1) return value + y;\n        if (index % 3 === 2) return value + z;\n    });\n\n    return positions;\n}\n\n/**\n * Creates box models.\n * @returns {modelJSON}\n */\nfunction box(r = 1.0, g = 1.0, b = 1.0) {\n\n    const positions = [];\n    const colors = [];\n    const normals = [];\n\n    const count = 1;\n    const space = 3;\n\n    for (let x = 0; x < count; x += 1) {\n\n        for (let y = 0; y < count; y += 1) {\n\n            for (let z = 0; z < count; z += 1) {\n\n                positions.push(\n\n                    ...getpositions(((x - count/2) * space + (space/2)), ((y - count/2) * space + (space/2)), ((z - count/2) * space + (space/2)))\n                );\n\n                normals.push(\n\n                    ...getnormals()\n                );\n\n                for (let iterator = 0, length = positions.length / 3; iterator < length; iterator += 1) {\n\n                    colors.push(r, g, b, 1.0);\n                }\n            }\n        }\n    }\n\n    return {\n\n        'draw': {\n\n            'method': 'arrays',\n            'mode': 'TRIANGLES',\n            'offset': 0,\n            'count': positions.length / 3\n        },\n        'colors': {\n\n            'buffer': colors,\n            'components': 4,\n            'type': 'FLOAT',\n            'normalize': false,\n            'stride': 0,\n            'offset': 0\n        },\n        'normals': {\n\n            'buffer': normals,\n            'components': 3,\n            'type': 'FLOAT',\n            'normalize': false,\n            'stride': 0,\n            'offset': 0\n        },\n        'positions': {\n\n            'buffer': positions,\n            'components': 3,\n            'type': 'FLOAT',\n            'normalize': false,\n            'stride': 0,\n            'offset': 0\n        }\n    };\n}\n\nexport {\n\n    box\n};\n\nexport default box;\n","import {System} from '../../index.js';\n\nimport Renderer from '../../../helpers/renderer.js';\nimport WebGL from '../../../helpers/webgl.js';\n\n/**\n * Creates Hypercube.js render systems.\n * @example\n * const render = new Render();\n *\n * // called by an update loop\n * render.update();\n */\nclass Render extends System {\n\n    $renderer;\n\n    /**\n     * Starts the system.\n     * @public\n     */\n    start() {\n\n        if (typeof this.engine.deviceviewer === 'undefined') {\n\n            return;\n        }\n\n        const context = new WebGL(this.engine.deviceviewer.element.getContext('webgl2', {\n\n            antialias: false\n        }));\n\n        this.$renderer = new Renderer(this.engine.deviceviewer, context);\n        this.$renderer.enabledepth();\n\n        this.$renderer.clear();\n\n        this.$renderer.usecamera(this.engine.devicegame.world.camera);\n        this.$renderer.render(this.engine.devicegame.world.models, this.engine.devicegame.world.root, ['lights']);\n    }\n\n    destroy() {\n\n        this.$renderer.destroy();\n    }\n\n    /**\n     * Updates the system.\n     * @public\n     */\n    update() {\n\n        if (typeof this.engine.deviceviewer === 'undefined') {\n\n            return;\n        }\n\n        this.$renderer.clear();\n\n        this.$renderer.usecamera(this.engine.devicegame.world.camera);\n        this.$renderer.render(this.engine.devicegame.world.models, this.engine.devicegame.world.root, ['lights']);\n    }\n}\n\nexport {\n\n    Render\n};\n\nexport default Render;\n","import {Engine} from './sources/core/engine.js';\nimport {System} from './sources/core/system.js';\n\nimport {Controller as DeviceController} from './sources/devices/controller.js';\nimport {Game as DeviceGame} from './sources/devices/game.js';\nimport {Viewer as DeviceViewer} from './sources/devices/viewer.js';\n\nimport {Forward as SystemForward} from './sources/systems/forward';\nimport {Render as SystemRender} from './sources/systems/render.js';\n\nexport {\n\n    Engine,\n    System,\n\n    DeviceController,\n    DeviceGame,\n    DeviceViewer,\n\n    SystemForward,\n    SystemRender\n};\n\nexport default {\n\n    Engine,\n    System,\n\n    DeviceController,\n    DeviceGame,\n    DeviceViewer,\n\n    SystemForward,\n    SystemRender\n};\n","import {Loop} from '../../../helpers/loop.js';\n\n/**\n * Creates Hypercube.js Game Engines.\n * @example\n * const engine = new Engine();\n */\nclass Engine {\n\n    $rafid;\n\n    $devicecontroller;\n\n    $machine;\n\n    /**\n     * Stores the game device.\n     * @type {import('../../index.js').DeviceGame}\n     * @private\n     */\n    $devicegame;\n\n    /**\n     * Stores the viewer device.\n     * @type {import('../../index.js').DeviceViewer}\n     * @private\n     */\n    $deviceviewer;\n\n    /**\n     * Stores the systems.\n     * @type {import('../../index.js').System[]}\n     * @private\n     */\n    $systems;\n\n    $started;\n\n    get devicecontroller() {\n\n        return this.$devicecontroller;\n    }\n\n    /**\n     * Gets the game device.\n     * @type {import('../../index.js').DeviceGame}\n     * @public\n     * @readonly\n     */\n    get devicegame() {\n\n        return this.$devicegame;\n    }\n\n    /**\n     * Gets the viewer device.\n     * @type {import('../../index.js').DeviceViewer}\n     * @public\n     * @readonly\n     */\n    get deviceviewer() {\n\n        return this.$deviceviewer;\n    }\n\n    set devicecontroller($devicecontroller) {\n\n        this.$devicecontroller = $devicecontroller;\n    }\n\n    /**\n     * Sets the viewer device.\n     * @type {import('../../index.js').DeviceGame}\n     * @public\n     */\n    set devicegame($devicegame) {\n\n        this.$devicegame = $devicegame;\n    }\n\n    /**\n     * Sets the viewer device.\n     * @type {import('../../index.js').DeviceViewer}\n     * @public\n     */\n    set deviceviewer($deviceviewer) {\n\n        this.$deviceviewer = $deviceviewer;\n    }\n\n    /**\n     * Creates a new Hypercube.js Game Engine.\n     */\n    constructor() {\n\n        this.$systems = [];\n\n        this.$loop = new Loop(this.tick.bind(this));\n    }\n\n    /**\n     * Adds a system.\n     * @param {import('../../index.js').System} $system The system to add.\n     * @public\n     */\n    addsystem($system) {\n\n        $system.engine = this;\n\n        this.$systems.push($system);\n    }\n\n    // @TODO\n    start() {\n\n        this.$started = true;\n\n        this.$systems.forEach(($system) => {\n\n            $system.start();\n        });\n\n        this.$loop.update();\n    }\n\n    // @TODO\n    stop() {\n\n        this.$started = false;\n\n        window.cancelAnimationFrame(this.$rafid);\n\n        this.$rafid = undefined;\n\n        this.$systems = [];\n    }\n\n    /**\n     * Updates each system once.\n     * @public\n     */\n    tick(timeframe) {\n\n        // console.log('tick')\n\n        this.$systems.forEach(($system) => {\n\n            if (this.$started === false) return;\n\n            $system.update(timeframe);\n        });\n    }\n}\n\nexport {\n\n    Engine\n};\n\nexport default Engine;\n","class Controller {\n\n    $game;\n\n    constructor($game) {\n\n        this.$game = $game;\n\n        window.addEventListener('keyup', this.handleinputs.bind(this));\n    }\n\n    destroy() {\n\n        window.removeEventListener('keyup', this.handleinputs.bind(this));\n    }\n\n    handleinputs(event) {\n\n        if (event.key === 'ArrowLeft'\n        && this.$game.$world.$nodes[10].$translation[0] >= 0) {\n\n            this.$game.$world.$nodes[10].$translation[0] -= 2\n        }\n\n        else if (event.key === 'ArrowRight'\n        && this.$game.$world.$nodes[10].$translation[0] <= 0) {\n\n            this.$game.$world.$nodes[10].$translation[0] += 2\n        }\n    }\n}\n\nexport {\n\n    Controller\n};\n\nexport default Controller;\n","import World from '../../../helpers/world.js'\n\nclass Game {\n\n    $world;\n\n    get world() {\n\n        return this.$world;\n    }\n\n    constructor($cartridge) {\n\n        this.$world = new World($cartridge);\n    }\n}\n\nexport {\n\n    Game\n};\n\nexport default Game;\n","import Node from './node.js';\n\n/**\n * Creates game worlds from cartridges.\n * @example\n * const world = new World(cartridge);\n *\n * world.removenode(identifier);\n *\n * const download = world.tocartridge();\n */\nclass World {\n\n    /**\n     * Stores the main camera game node of the game.\n     * @type {gamenode}\n     * @private\n     */\n    $camera;\n\n    /**\n     * Stores the game nodes of type camera of the game.\n     * @type {Object<number, gamenode>}\n     * @private\n     */\n    $cameras;\n\n     /**\n     * Stores the JSON representation of the game.\n     * @type {cartridge}\n     * @private\n     */\n    $cartridge;\n\n    /**\n     * Stores the game nodes of type model of the game.\n     * @type {Object<number, gamenode>}\n     * @private\n     */\n    $models;\n\n    /**\n     * Stores all the game nodes of the game.\n     * @type {Object<number, gamenode>}\n     * @private\n     */\n    $nodes;\n\n    /**\n     * Stores the root game node of the game.\n     * @type {gamenode}\n     * @private\n     */\n    $root;\n\n    /**\n     * Gets the main camera game node of the game.\n     * @type {gamenode}\n     * @public\n     * @readonly\n     */\n    get camera() {\n\n        return this.$camera;\n    }\n\n    /**\n     * Gets the game nodes of type camera of the game.\n     * @type {Object<number, gamenode>}\n     * @public\n     * @readonly\n     */\n    get cameras() {\n\n        return this.$cameras;\n    }\n\n    /**\n     * Gets the game nodes of type model of the game.\n     * @type {Object<number, gamenode>}\n     * @public\n     * @readonly\n     */\n    get models() {\n\n        return this.$models;\n    }\n\n    /**\n     * Gets all the game nodes of the game.\n     * @type {Object<number, gamenode>}\n     * @public\n     * @readonly\n     */\n    get nodes() {\n\n        return this.$nodes;\n    }\n\n    /**\n     * Gets the root game node of the game.\n     * @type {gamenode}\n     * @public\n     * @readonly\n     */\n    get root() {\n\n        return this.$root;\n    }\n\n    /**\n     * Sets the main camera game node of the game.\n     * @type {gamenode}\n     * @public\n     */\n    set camera(node) {\n\n        this.$camera = node;\n    }\n\n    /**\n     * Sets the root game node of the game.\n     * @type {gamenode}\n     * @public\n     */\n    set root(node) {\n\n        this.$root = node;\n    }\n\n    /**\n     * Creates a game world from the cartridge.\n     * @param {cartridge} cartridge the JSON representation of the game.\n     */\n    constructor(cartridge) {\n\n        this.$cartridge = this.$immutable(cartridge);\n\n        this.$cameras = {};\n        this.$models = {};\n        this.$nodes = {};\n\n        this.$cartridge.nodes.forEach((cartridgenode) => {\n\n            const identifier = cartridgenode.identifier;\n\n            if (typeof this.$nodes[identifier] === 'undefined') {\n\n                this.$nodes[identifier] = this.$gethierarchy(identifier);\n            }\n        });\n\n        this.$camera = this.$nodes[this.$cartridge.camera];\n        this.$root = this.$nodes[this.$cartridge.node];\n    }\n\n    /**\n     * Gets the full hierarchy (top to bottom) of a game node from the cartridge node.\n     * @param {number} identifier The identifier of the cartridge node.\n     * @returns {gamenode}\n     * @private\n     */\n    $gethierarchy(identifier) {\n\n        const cartridgenode = this.$cartridge.nodes.find((cartridgenode) => cartridgenode.identifier === identifier);\n        const node = new Node(cartridgenode);\n\n        if (node.type === 'CAMERA_NODE') {\n\n            this.$cameras[identifier] = node;\n        }\n\n        else if (node.type === 'MODEL_NODE') {\n\n            this.$models[identifier] = node;\n        }\n\n        if (cartridgenode.nodes.length !== 0) {\n\n            const parent = node;\n\n            cartridgenode.nodes.forEach((identifier) => {\n\n                if (typeof this.$nodes[identifier] === 'undefined') {\n\n                    this.$nodes[identifier] = this.$gethierarchy(identifier);\n                }\n\n                const current = this.$nodes[identifier];\n\n                current.addparent(parent);\n                parent.addchild(current);\n            });\n        }\n\n        return node;\n    }\n\n    /**\n     * Gets immutable data from data source.\n     * @param {any} data The data to make immutable.\n     * @returns {any}\n     * @private\n     */\n    $immutable(data) {\n\n        if (typeof data === 'undefined') {\n\n            return data;\n        }\n\n        return JSON.parse(JSON.stringify(data));\n    }\n\n    /**\n     * Adds a model node to the game world.\n     * @param {object} properties The properties needed to add the model node.\n     * @param {string} [properties.$name] The name of the model node.\n     * @param {string} [properties.$type] The model type of the model node.\n     * @param {gamenode} parent The game node to set as parent.\n     * @returns {gamenode}\n     * @public\n     */\n    addmodel(properties, parent, identifier = Date.now()) {\n\n        const {\n\n            '$name': $name = 'Model',\n            '$type': $type = 'box'\n\n        } = properties;\n\n        const node = new Node({\n\n            'identifier': identifier,\n            'name': $name,\n            'type': 'MODEL_NODE',\n            'nodes': [],\n            'parameters': {\n\n                'translation': [0, 0, 0],\n                'rotation': [0, 0, 0],\n                'scale': [1, 1, 1],\n                'type': $type\n            }\n        });\n\n        this.$nodes[identifier] = node;\n        this.$models[identifier] = node;\n\n        node.addparent(parent);\n        parent.addchild(node);\n\n        return node;\n    }\n\n    /**\n     * Adds a simple node to the game world.\n     * @param {object} properties The properties needed to add the simple node.\n     * @param {string} [properties.$name] The name of the simple node.\n     * @param {gamenode} parent The game node to set as parent.\n     * @returns {gamenode}\n     * @public\n     */\n    addnode(properties, parent) {\n\n        const {\n\n            '$name': $name = 'Node'\n\n        } = properties;\n\n        const identifier = Date.now();\n\n        const node = new Node({\n\n            'identifier': identifier,\n            'name': $name,\n            'type': 'NODE',\n            'nodes': [],\n            'parameters': {\n\n                'translation': [0, 0, 0],\n                'rotation': [0, 0, 0],\n                'scale': [1, 1, 1]\n            }\n        });\n\n        this.$nodes[identifier] = node;\n\n        node.addparent(parent);\n        parent.addchild(node);\n\n        return node;\n    }\n\n    /**\n     * Gets a game node from an identifier.\n     * @param {number} identifier The identifier of the game node.\n     * @returns {gamenode}\n     * @public\n     */\n    getnode(identifier) {\n\n        return this.$nodes[identifier];\n    }\n\n    /**\n     * Gets all the parents of a game node in the game world from top to bottom.\n     * @param {gamenode} node The game node to get the game world transformations from.\n     * @returns {Array<gamenode>}\n     * @public\n     */\n    getparents(node) {\n\n        const parents = [];\n\n        if (typeof node.parent !== 'undefined') {\n\n            parents.push(...this.getparents(node.parent));\n        }\n\n        parents.push(node);\n\n        return parents;\n    }\n\n    /**\n     * Removes a game node from the game world.\n     * @param {number} identifier The identifier of the game node.\n     * @returns {Array<number>}\n     * @public\n     */\n    removenode(identifier) {\n\n        const removed = [];\n\n        const node = this.$nodes[identifier];\n\n        removed.push(node.identifier);\n\n        if (node.haschildren === true) {\n\n            const parent = node;\n\n            [...parent.nodes].forEach((node) => {\n\n                removed.push(...this.removenode(node.identifier));\n            });\n        }\n\n        if (node.hasparent === true) {\n\n            node.parent.removechild(node);\n            node.removeparent();\n        }\n\n        if (node === this.$camera) {\n\n            this.$camera = undefined;\n        }\n\n        if (node === this.$root) {\n\n            this.$root = undefined;\n        }\n\n        delete this.$cameras[identifier];\n        delete this.$models[identifier];\n        delete this.$nodes[identifier];\n\n        return removed;\n    }\n\n    /**\n     * Changes the parent node of a game node.\n     * @param {gamenode} node The game node to reparent.\n     * @param {gamenode} parent The game node to set as new parent.\n     * @public\n     */\n    reparent(node, parent) {\n\n        if (node === parent\n        || node.parent === parent\n        || parent.type !== 'NODE') {\n\n            return;\n        }\n\n        if (node.hasparent === true) {\n\n            node.parent.removechild(node);\n            node.removeparent();\n        }\n\n        node.addparent(parent);\n        parent.addchild(node);\n\n        return node;\n    }\n\n    /**\n     * Gets the JSON representation of the game.\n     * @returns {cartridge}\n     * @public\n     */\n    tocartridge() {\n\n        const cartridge = {};\n\n        cartridge.nodes = [];\n\n        Object.values(this.$nodes).forEach((node) => {\n\n            const {identifier, name, nodes, parameters, type} = node;\n\n            const cartridgenode = {};\n\n            cartridgenode.identifier = identifier;\n            cartridgenode.name = name;\n            cartridgenode.type = type;\n            cartridgenode.nodes = nodes.map((node) => node.identifier);\n            cartridgenode.parameters = parameters;\n\n            cartridge.nodes.push(cartridgenode);\n        });\n\n        cartridge.camera = this.$camera.identifier;\n        cartridge.node = this.$root.identifier;\n\n        return this.$immutable(cartridge);\n    }\n}\n\nexport {\n\n    World\n};\n\nexport default World;\n","/**\n * Creates viewers.\n * @example\n * const viewer = new Viewer(document.body);\n * const element = viewer.element;\n */\nclass Viewer {\n\n    /**\n     * Stores the viewer container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $element;\n\n    /**\n     * Gets the canvas element.\n     * @type {HTMLCanvasElement}\n     * @public\n     * @readonly\n     */\n    get element() {\n\n        return this.$element;\n    }\n\n    /**\n     * Creates a new viewer.\n     * @param {HTMLElement} $container The container for the canvas element.\n     */\n    constructor($container) {\n\n        this.$container = $container;\n        this.$element = document.createElement('canvas');\n\n        this.$element.style.width = '100%';\n        this.$element.style.height = '100%';\n\n        this.$container.appendChild(this.$element);\n\n        this.setsize();\n    }\n\n    /**\n     * Gets the aspect ratio of the viewer.\n     * @returns {number}\n     */\n    aspect() {\n\n        return this.$element.clientWidth / this.$element.clientHeight;\n    }\n\n    /**\n     * Destroys the rendering context and the canvas element.\n     * @public\n     */\n    destroy() {\n\n        // remove canvas element from its parent\n        this.$container.removeChild(this.$element);\n    }\n\n    /**\n     * Gets the device pixel ratio.\n     * @returns {number}\n     * @public\n     */\n    ratio() {\n\n        return window.devicePixelRatio || 1;\n    }\n\n    /**\n     * Sets the size of the viewer.\n     * @public\n     */\n    setsize() {\n\n        const ratio = this.ratio();\n\n        const width = Math.floor(this.$element.offsetWidth * ratio);\n        const height = Math.floor(this.$element.offsetHeight * ratio);\n\n        this.$element.setAttribute('width', '' + width);\n        this.$element.setAttribute('height', '' + height);\n    }\n}\n\nexport {\n\n    Viewer\n};\n\nexport default Viewer;\n","/**\n * Creates WebGL 2.0 wrappers.\n * @example\n * const webgl = new WebGL(context);\n * const context = webgl.context;\n */\nclass WebGL {\n\n    /**\n     * Stores the WebGL 2.0 program currently being used.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $program;\n\n    /**\n     * Stores the rendering context of the renderer.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Gets the rendering context of the renderer.\n     * @type {WebGL2RenderingContext}\n     * @public\n     * @readonly\n     */\n    get context() {\n\n        return this.$context;\n    }\n\n    /**\n     * Creates a new WebGL 2.0 wrapper.\n     * @param {WebGL2RenderingContext} context The rendering context.\n     */\n    constructor(context) {\n\n        this.$context = context;\n    }\n\n    /**\n     * Gets an attribute from given WebGL program.\n     * @param {string} name The attribute to get.\n     * @returns {number}\n     * @public\n     */\n    attribute(name) {\n\n        return this.$context.getAttribLocation(this.$program, name);\n    }\n\n    /**\n     * Destroys the rendering context and the canvas element.\n     * @public\n     */\n    destroy() {\n\n        // lose rendering context\n        this.$context.getExtension('WEBGL_lose_context').loseContext();\n    }\n\n    /**\n     * Creates a WebGL 2.0 fragment shader.\n     * @param {string} source The shader source.\n     * @returns {WebGLShader}\n     * @public\n     */\n    fragment(source) {\n\n        return this.shader(this.$context.FRAGMENT_SHADER, source);\n    }\n\n    /**\n     * Gets a pixel from given position.\n     * @param {number} x The x position of the pixel to get.\n     * @param {number} y The y position of the pixel to get.\n     * @returns {Uint8Array}\n     */\n    pixel(x, y) {\n\n        const context = this.$context;\n\n        // a pixel is defined by 4 components (RGBA) with a [0-255] range\n        const components = 4;\n        const buffer = new Uint8Array(components);\n\n        context.readPixels(x, y, 1, 1, context.RGBA, context.UNSIGNED_BYTE, buffer);\n\n        return buffer;\n    }\n\n    /**\n     * Creates a WebGL 2.0 program from given shaders.\n     * @param {WebGLShader} vertex The vertex shader.\n     * @param {WebGLShader} fragment The fragment shader.\n     * @returns {WebGLProgram}\n     * @public\n     */\n    program(vertex, fragment) {\n\n        const context = this.$context;\n\n        // prepare the program to use\n        const program = context.createProgram();\n\n        // attach the program\n        context.attachShader(program, vertex);\n        context.attachShader(program, fragment);\n        context.linkProgram(program);\n\n        return program;\n    }\n\n    /**\n     * Creates a WebGL 2.0 shader.\n     * @param {number} type The shader type.\n     * @param {string} source The shader source.\n     * @returns {WebGLShader}\n     * @public\n     */\n    shader(type, source) {\n\n        const context = this.$context;\n\n        const shader = context.createShader(type);\n\n        // prepare the shader\n        context.shaderSource(shader, source);\n        context.compileShader(shader);\n\n        return shader;\n    }\n\n    /**\n     * Gets a uniform from given WebGL program.\n     * @param {string} name The uniform to get.\n     * @returns {WebGLUniformLocation}\n     * @public\n     */\n    uniform(name) {\n\n        return this.$context.getUniformLocation(this.$program, name);\n    }\n\n    /**\n     * Uses a WebGL 2.0 program.\n     * @param {WebGLProgram} program The program to use.\n     * @public\n     */\n    use(program) {\n\n        // use the program\n        this.$context.useProgram(program);\n\n        // store the WebGL 2.0 program currently being used\n        this.$program = program;\n    }\n\n    /**\n     * Creates a WebGL 2.0 vertex shader.\n     * @param {string} source The shader source.\n     * @returns {WebGLShader}\n     * @public\n     */\n    vertex(source) {\n\n        return this.shader(this.$context.VERTEX_SHADER, source);\n    }\n}\n\nexport {\n\n    WebGL\n};\n\nexport default WebGL;\n","import {RADIANS} from './mathematics.js';\n\nimport Matrix4 from './matrix4.js';\nimport Model from './model.js';\n\nimport modelBox from './box.js';\nimport modelGrid from './grid.js';\n\nimport fragmentColors from './colors.fragment.js';\nimport vertexColors from './colors.vertex.js';\n\nimport fragmentLights from './lights.fragment.js';\nimport vertexLights from './lights.vertex.js';\n\n// @TODO : shader class\n// @TODO : add shader shadows\n\n// IMPORTANT : colors = unlit\n\nclass Renderer {\n\n    $camera;\n\n    $matrixcamera;\n\n    $matrixprojection;\n\n    $meshes;\n\n    $programs;\n\n    $webgl;\n\n    get matrixcamera() {\n\n        return this.$matrixcamera;\n    }\n\n    get matrixprojection() {\n\n        return this.$matrixprojection;\n    }\n\n    get matrixview() {\n\n        return new Matrix4()\n        .clone(this.matrixcamera)\n        .invert();\n    }\n\n    constructor(viewer, webgl) {\n\n        this.$webgl = webgl;\n        this.$viewer = viewer;\n        this.$context = webgl.context;\n\n        // @TODO : prepare meshes dynamically\n        this.$meshes = {};\n        this.$meshes.floor = new Model(webgl).prepare(modelBox(1.0, 1.0, 1.0));\n        this.$meshes.hero = new Model(webgl).prepare(modelBox(0.4, 0.8, 0.6));\n        this.$meshes.box = new Model(webgl).prepare(modelBox(1.0, 1.0, 1.0));\n        this.$meshes.grid = new Model(webgl).prepare(modelGrid(16, 4));\n\n        // @TODO : prepare shaders dynamically\n        this.$programs = {};\n        this.$programs.colors = webgl.program(webgl.vertex(vertexColors), webgl.fragment(fragmentColors));\n        this.$programs.lights = webgl.program(webgl.vertex(vertexLights), webgl.fragment(fragmentLights));\n    }\n\n    clear() {\n\n        this.$context.viewport(0, 0, this.$context.canvas.width, this.$context.canvas.height);\n        this.$context.clearColor(0, 0, 0, 1);\n        this.$context.clear(this.$context.COLOR_BUFFER_BIT | this.$context.DEPTH_BUFFER_BIT);\n    }\n\n    destroy() {\n\n        this.$webgl.destroy();\n    }\n\n    enabledepth() {\n\n        this.$context.enable(this.$context.DEPTH_TEST);\n    }\n\n    pick(x, y, width, height) {\n\n        const ratio = this.$viewer.ratio();\n        const pixels = this.$webgl.pixel(x * ratio, (height - y) * ratio);\n\n        console.log(pixels);\n    }\n\n    // @TODO : remove world here et garder que root/graph/node\n    render(models, root, attributes) {\n\n        // @TODO : attributes validator\n\n        const colors = (attributes.indexOf('colors') !== -1);\n        const lights = (attributes.indexOf('lights') !== -1);\n\n        if (colors === true) {\n\n            this.$webgl.use(this.$programs.colors);\n\n            this.$context.uniformMatrix4fv(this.$webgl.uniform('view'), false, this.matrixview.get());\n            this.$context.uniformMatrix4fv(this.$webgl.uniform('projection'), false, this.matrixprojection.get());\n        }\n\n        // @TODO : refacto if/else lights/colors\n        else if (lights === true) {\n\n            this.$webgl.use(this.$programs.lights);\n\n            // @TODO : add/set light\n            const lightdirection = [0, 10, 10];\n            const lightcolor = [1.0, 1.0, 1.0];\n\n            this.$context.uniform3fv(this.$webgl.uniform('directional'), new Float32Array(lightdirection));\n            this.$context.uniform3fv(this.$webgl.uniform('directionalColor'), new Float32Array(lightcolor));\n            this.$context.uniformMatrix4fv(this.$webgl.uniform('view'), false, this.matrixview.get());\n            this.$context.uniformMatrix4fv(this.$webgl.uniform('projection'), false, this.matrixprojection.get());\n        }\n\n        Object.values(models).forEach((node) => {\n\n            const {parameters} = node;\n            const {type} = parameters;\n\n\n\n\n            // @TODO : faire à la création/update du node car minor perf issues\n\n            const hierarchy = [node];\n\n            let current = node;\n\n            while (current.hasparent === true) {\n\n                current = current.parent;\n\n                hierarchy.unshift(current);\n            }\n\n            // @TODO : refacto - if current model is in the world but not child of root node, then discard it\n            if (hierarchy.indexOf(root) === -1) {\n\n                return;\n            }\n\n\n\n\n\n            const matrixtransformation = new Matrix4();\n\n            hierarchy.forEach((node) => {\n\n                // @TODO : faire à la création/update du node car perf issues\n                matrixtransformation\n                .translate(node.translation)\n                .rotateY(node.rotation[1] * RADIANS)\n                .rotateX(node.rotation[0] * RADIANS)\n                .rotateZ(node.rotation[2] * RADIANS)\n                .scale(node.scale)\n                ;\n            });\n\n            if (colors === true) {\n\n                this.$context.uniformMatrix4fv(this.$webgl.uniform('transformation'), false, matrixtransformation.get());\n\n                this.$meshes[type].render({\n\n                    'positions': true,\n                    'colors': true\n                });\n            }\n\n            // @TODO : refacto if/else lights/colors\n            else if (lights === true) {\n\n                this.$context.uniformMatrix4fv(this.$webgl.uniform('transformation'), false, matrixtransformation.get());\n\n                this.$meshes[type].render({\n\n                    'positions': true,\n                    'colors': true,\n                    'normals': true\n                });\n            }\n        });\n    }\n\n    // @TODO : factoriser le get hierarchy\n    setmatrixcamera() {\n\n        let current = this.$camera;\n\n        const hierarchy = [current];\n\n        while (current.hasparent === true) {\n\n            current = current.parent;\n\n            hierarchy.unshift(current);\n        }\n\n        const matrixtransformation = new Matrix4();\n\n        hierarchy.forEach((node) => {\n\n            matrixtransformation\n\n            // @TODO : remove (test only)\n            // .rotateY(node.rotation[1] * RADIANS * performance.now() / 3600)\n\n\n            .translate(node.translation)\n            .rotateY(node.rotation[1] * RADIANS)\n            .rotateX(node.rotation[0] * RADIANS)\n            .rotateZ(node.rotation[2] * RADIANS)\n            ;\n        });\n\n        // matrixtransformation\n        // .translate(this.$camera.translation)\n        // .rotateY(this.$camera.rotation[1] * RADIANS)\n        // .rotateX(this.$camera.rotation[0] * RADIANS)\n        // .rotateZ(this.$camera.rotation[2] * RADIANS)\n        // ;\n\n        this.$matrixcamera = matrixtransformation;\n    }\n\n    setmatrixprojection() {\n\n        const {parameters} = this.$camera;\n        const {projection} = parameters;\n        const {far, fieldofview, near} = projection;\n\n        const angle = fieldofview * RADIANS;\n        const aspect = this.$viewer.aspect();\n\n        this.$matrixprojection = new Matrix4()\n        .perspective(angle, aspect, near, far);\n    }\n\n    usecamera(camera) {\n\n        this.$camera = camera;\n\n        this.setmatrixcamera();\n        this.setmatrixprojection();\n    }\n}\n\nexport {\n\n    Renderer\n};\n\nexport default Renderer;\n","/**\n * Creates grid models on the x and z axes.\n * @param {number} size The number of divisions per half axis.\n * @param {number} steps The steps to highlight main divisions.\n * @returns {modelJSON}\n */\nfunction grid(size, steps) {\n\n    const positions = [];\n    const colors = [];\n\n    positions.push(\n\n        0.0, 0.0, 0.0,\n        -size, 0.0, 0.0,\n\n        0.0, 0.0, 0.0,\n        size, 0.0, 0.0,\n\n        0.0, 0.0, 0.0,\n        0.0, -size, 0.0,\n\n        0.0, 0.0, 0.0,\n        0.0, size, 0.0,\n\n        0.0, 0.0, 0.0,\n        0.0, 0.0, -size,\n\n        0.0, 0.0, 0.0,\n        0.0, 0.0, size\n    );\n\n    colors.push(\n\n        1.0, 1.0, 1.0, 1.0,\n        1.0, 1.0, 1.0, 1.0,\n\n        1.0, 0.4, 0.4, 1.0,\n        1.0, 0.4, 0.4, 1.0,\n\n        1.0, 1.0, 1.0, 1.0,\n        1.0, 1.0, 1.0, 1.0,\n\n        0.4, 1.0, 0.4, 1.0,\n        0.4, 1.0, 0.4, 1.0,\n\n        1.0, 1.0, 1.0, 1.0,\n        1.0, 1.0, 1.0, 1.0,\n\n        0.4, 0.4, 1.0, 1.0,\n        0.4, 0.4, 1.0, 1.0\n    );\n\n    for (let iterator = 1; iterator < size + 1; iterator += 1) {\n\n        let red = 0.2;\n        let green = 0.2;\n        let blue = 0.2;\n\n        if (iterator % steps === 0) {\n\n            red = 0.4;\n            green = 0.4;\n            blue = 0.4;\n        }\n\n        if (iterator === size) {\n\n            red = 0.4;\n            green = 0.4;\n            blue = 0.4;\n        }\n\n        positions.push(\n\n            -size, 0.0, -iterator,\n            size, 0.0, -iterator,\n\n            -size, 0.0, iterator,\n            size, 0.0, iterator,\n\n            -iterator, 0.0, -size,\n            -iterator, 0.0, size,\n\n            iterator, 0.0, -size,\n            iterator, 0.0, size\n        );\n\n        colors.push(\n\n            red, green, blue, 1.0,\n            red, green, blue, 1.0,\n\n            red, green, blue, 1.0,\n            red, green, blue, 1.0,\n\n            red, green, blue, 1.0,\n            red, green, blue, 1.0,\n\n            red, green, blue, 1.0,\n            red, green, blue, 1.0\n        );\n    }\n\n    return {\n\n        'draw': {\n\n            'method': 'arrays',\n            'mode': 'LINES',\n            'offset': 0,\n            'count': positions.length / 3\n        },\n        'colors': {\n\n            'buffer': colors,\n            'components': 4,\n            'type': 'FLOAT',\n            'normalize': false,\n            'stride': 0,\n            'offset': 0\n        },\n        'positions': {\n\n            'buffer': positions,\n            'components': 3,\n            'type': 'FLOAT',\n            'normalize': false,\n            'stride': 0,\n            'offset': 0\n        }\n    };\n}\n\nexport {\n\n    grid\n};\n\nexport default grid;\n","const vertex = (\n\n    'attribute vec4 COLOR;' +\n    'attribute vec4 POSITION;' +\n\n    'uniform mat4 projection;' +\n    'uniform mat4 transformation;' +\n    'uniform mat4 view;' +\n\n    'varying highp vec4 v_color;' +\n\n    'void main(void) {' +\n\n        'gl_Position = projection * view * transformation * POSITION;' +\n        'v_color = COLOR;' +\n    '}'\n);\n\nexport {\n\n    vertex\n};\n\nexport default vertex;\n","const fragment = (\n\n    'varying highp vec4 v_color;' +\n\n    'void main(void) {' +\n\n        'gl_FragColor = v_color;' +\n        'gl_FragColor.rgb *= gl_FragColor.a;' +\n    '}'\n);\n\nexport {\n\n    fragment\n};\n\nexport default fragment;\n","const vertex = (\n\n    'attribute vec4 COLOR;' +\n    'attribute vec3 NORMAL;' +\n    'attribute vec4 POSITION;' +\n\n    'uniform vec3 directional;' +\n    'uniform vec3 directionalColor;' +\n    'uniform mat4 projection;' +\n    'uniform mat4 transformation;' +\n    'uniform mat4 view;' +\n\n    'varying highp vec4 v_color;' +\n    'varying highp vec3 v_light;' +\n\n    'void main(void) {' +\n\n        'gl_Position = projection * view * transformation * POSITION;' +\n        'v_color = COLOR;' +\n        'v_light = directionalColor * dot(normalize(directional), normalize(mat3(transformation) * NORMAL));' +\n    '}'\n);\n\nexport {\n\n    vertex\n};\n\nexport default vertex;\n","const fragment = (\n\n    'varying highp vec4 v_color;' +\n    'varying highp vec3 v_light;' +\n\n    'void main(void) {' +\n\n        'highp float fognear = 0.97;' +\n        'highp float fogfar = 1.0;' +\n        'highp vec4 fogcolor = vec4(0.0);' +\n\n        'highp float fogamount = smoothstep(fognear, fogfar, gl_FragCoord.z);' +\n\n        'gl_FragColor = mix(vec4(v_color.rgb * v_light * 1.0, 1.0), fogcolor, fogamount);' +\n        // 'gl_FragColor = vec4(v_color.rgb * v_light * 0.5 + 0.5, 1.0);' +\n\n    '}'\n);\n\nexport {\n\n    fragment\n};\n\nexport default fragment;\n","export default __webpack_public_path__ + \"904ab94261925f38033b9c6cd67e914b.mp3\";","import {Machine} from '@/core/machine.js';\n\nnew Machine();\n","import HYPERCUBEJS from '@hypercubejs/hypercubejs';\n\nimport background from '../../../game/background.mp3';\nimport cartridge from '../../../game/cartridge.json';\n\n/**\n * Creates Hypercube.js Game Machines.\n * @example\n * const machine = new Machine();\n */\nclass Machine {\n\n    /**\n     * Stores the Hypercube.js Game Engine currently being used.\n     * @type {import('@hypercubejs/hypercubejs').Engine}\n     * @private\n     */\n    $engine;\n\n    $started;\n\n    $audio;\n\n    /**\n     * Creates a new Hypercube.js Game Machine.\n     */\n    constructor() {\n\n        document.getElementById('start').addEventListener('click', () => {\n\n            this.start();\n        });\n\n        document.addEventListener('keydown', (event) => {\n\n            if (event.key === 'Enter'\n            && this.$started !== true) {\n\n                this.start();\n            }\n\n            else if (event.key === ' '\n            && this.$started !== true) {\n\n                this.start();\n            }\n        });\n    }\n\n    restart() {\n\n        this.stop();\n        this.start();\n\n        // window.a = this.$engine;\n        // window.b = this.$engine.devicegame.$world.$nodes[10].$translation;\n    }\n\n    start() {\n\n        if (this.$audio !== true) {\n\n            const sound = new Audio(background);\n\n            sound.oncanplaythrough = () => {\n\n                sound.play();\n                sound.loop = true;\n            };\n\n            this.$audio = true;\n        }\n\n        this.$engine = new HYPERCUBEJS.Engine();\n        this.$engine.$machine = this;\n\n        this.$engine.devicegame = new HYPERCUBEJS.DeviceGame(JSON.parse(JSON.stringify(cartridge)));\n        this.$engine.deviceviewer = new HYPERCUBEJS.DeviceViewer(document.body);\n        this.$engine.devicecontroller = new HYPERCUBEJS.DeviceController(this.$engine.devicegame);\n        this.$engine.addsystem(new HYPERCUBEJS.SystemRender());\n        this.$engine.addsystem(new HYPERCUBEJS.SystemForward());\n        this.$engine.start();\n\n        this.$started = true;\n\n        // window.game = this.$engine.devicegame;\n    }\n\n    stop() {\n\n        this.$engine.stop();\n        this.$engine.deviceviewer.destroy();\n        this.$engine.devicecontroller.destroy();\n        this.$engine.devicegame = undefined;\n        delete this.$engine;\n\n        this.$started = false;\n    }\n}\n\nexport {\n\n    Machine\n};\n\nexport default Machine;\n","// startup\n// Load entry module and return exports\n// This entry module doesn't tell about it's top-level declarations so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[34](0, __webpack_exports__, __webpack_require__);\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","Loop","handler","framerate","speed","panic","elapsedTime","lastUpdate","paused","pause","play","tick","times","requestAnimationFrame","update","currentUpdate","performance","now","bind","System","$engine","engine","start","$identifier","$name","$nodes","$parameters","$parent","$rotation","$scale","$translation","$type","haschildren","hasparent","identifier","name","nodes","parameters","$immutable","parent","rotation","scale","translation","type","constructor","cartridgenode","cartridgenodecamera","$constructornodecamera","cartridgenodemodel","$constructornodemodel","cartridgenodeempty","$constructornodeempty","data","JSON","parse","stringify","addchild","node","push","addparent","removechild","index","indexOf","splice","removeparent","undefined","rotateall","x","y","z","rotatex","rotatey","rotatez","scaleall","scalex","scaley","scalez","translateall","translatex","translatey","translatez","RADIANS","Math","PI","$elements","elements","identity","add","matrix","get","clone","from","invert","aa","ab","ac","ad","ba","bb","bc","bd","ca","cb","cc","cd","da","db","dc","dd","eeff","eefg","eefh","effg","effh","egfh","gehf","gehg","gehh","gfhg","gfhh","gghh","determinant","multiply","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","perspective","angle","aspect","near","far","tangent","tan","range","rotate","vector3","hypotenuse","hypot","Number","EPSILON","sine","sin","cosine","cos","ee","ef","eg","fe","ff","fg","ge","gf","gg","rotateX","rotateY","rotateZ","set","subtract","translate","transpose","MODES","TYPEDARRAYS","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","TYPES","$context","$model","$webgl","model","webgl","context","prepare","json","colors","normals","draw","positions","buffer","components","normalize","offset","stride","attributeBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","count","method","mode","render","filter","attribute","vertexAttribPointer","enableVertexAttribArray","drawArrays","getpositions","map","value","r","iterator","Engine","$rafid","$devicecontroller","$machine","$devicegame","$deviceviewer","$systems","$started","devicecontroller","devicegame","deviceviewer","$loop","addsystem","$system","forEach","stop","cancelAnimationFrame","timeframe","DeviceController","$game","addEventListener","handleinputs","destroy","removeEventListener","event","key","$world","DeviceGame","world","$cartridge","$camera","$cameras","$models","$root","camera","cameras","models","root","cartridge","$gethierarchy","find","current","addmodel","properties","Date","addnode","getnode","getparents","parents","removenode","removed","reparent","tocartridge","Object","values","DeviceViewer","$container","$element","element","createElement","style","width","height","appendChild","setsize","clientWidth","clientHeight","removeChild","ratio","devicePixelRatio","floor","offsetWidth","offsetHeight","setAttribute","SystemForward","$deathplaying","$windplaying","herocontainer","projection","fieldofview","collision","abs","SystemRender","$renderer","$program","getAttribLocation","getExtension","loseContext","fragment","source","shader","FRAGMENT_SHADER","pixel","readPixels","RGBA","UNSIGNED_BYTE","program","vertex","createProgram","attachShader","linkProgram","createShader","shaderSource","compileShader","uniform","getUniformLocation","use","useProgram","VERTEX_SHADER","getContext","antialias","$matrixcamera","$matrixprojection","$meshes","$programs","matrixcamera","matrixprojection","matrixview","viewer","$viewer","hero","box","grid","size","steps","red","green","blue","lights","clear","viewport","canvas","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enabledepth","enable","DEPTH_TEST","pick","pixels","console","log","attributes","uniformMatrix4fv","lightdirection","lightcolor","uniform3fv","hierarchy","unshift","matrixtransformation","setmatrixcamera","setmatrixprojection","usecamera","$audio","getElementById","restart","sound","Audio","background","oncanplaythrough","loop","body","__webpack_modules__"],"sourceRoot":""}